{"version":3,"sources":["containers/addressBook/contactForm/contactForm.reducer.tsx","components/button/button.presenter.tsx","containers/signIn/signIn.container.tsx","components/avatarPlaceholder/avatarPlaceholder.presenter.tsx","containers/addressBook/contactsList/contactsList.presenter.tsx","components/input/input.presenter.tsx","components/loader/loader.presenter.tsx","containers/addressBook/contactForm/addressArea/addressArea.presenter.tsx","containers/addressBook/contactForm/contactForm.helper.ts","containers/addressBook/contactForm/contactForm.container.tsx","containers/addressBook/transactionForm/feeEstimate/feeEstimate.presenter.tsx","containers/addressBook/transactionForm/transactionForm.helper.ts","containers/addressBook/transactionForm/transactionForm.container.tsx","containers/addressBook/addressBook.container.tsx","components/notification/notification.presenter.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["Actions","Button","children","actionType","isDisabled","onClick","className","classNames","btn__disabled","type","disabled","SignIn","activateBrowserWallet","useEthers","width","alt","src","getInitials","name","split","map","word","toUpperCase","slice","AvatarPlaceholder","ContactsList","contacts","onAddNewContact","onSelectContact","contact","Input","label","id","value","error","onChange","htmlFor","required","Loader","text","actionCreators","UPDATE_NAME","payload","address","UPDATE_ADDRESS","ensName","UPDATE_ENS_NAME","addressInputType","selectedContact","SELECT_ADDRESS_INPUT_TYPE","reducer","state","action","editedContact","isDirtyMap","AddressArea","formErrors","dispatch","event","target","resolveEnsNameAddress","notificationsContext","a","provider","providers","EtherscanProvider","process","resolveName","setNotification","message","undefined","notifyOnSuccessfulSave","formMode","ContactForm","onSave","onDelete","useReducer","getInitialState","useState","isLoadingEns","setIsLoadingEns","isSaveDisabled","setFormErrors","useContext","NotificationsContext","useEffect","initialContact","allContacts","utils","isAddress","find","validateForm","onSubmit","preventDefault","notifyOnDelete","then","FeeEstimate","isLoadingFee","fee","eth","nzd","estimateTransactionFee","amount","ethPrice","etherscanProvider","Promise","all","estimateGas","to","parseEther","toString","getGasPrice","estimatedGas","gasPrice","transactionFee","formatEther","mul","transactionFeeNzd","Number","parseFloat","toFixed","console","log","notifyOnFailedTransaction","TransactionForm","onEditContact","setAmount","isMining","setIsMining","setIsLoadingFee","setFee","isDirty","useRef","sendTransaction","useSendTransaction","transactionState","status","notifyOnSuccessfulTransaction","errorMessage","includes","current","useSendTransactionWithErrorHandling","account","etherBalance","useEtherBalance","useCoingeckoPrice","useMemo","isSendDisabled","parseUnits","gt","newAmount","isNaN","sortAlphabetically","b","localeCompare","filterOutCurrentContact","currentContact","parsedContact","AddressBook","mode","setMode","setSelectedContact","storedContacts","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","sort","filter","Notification","Math","random","createContext","App","notification","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","catch","ReactDOM","render","StrictMode","DAppProvider","config","document","getElementById"],"mappings":"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","file":"static/js/main.8ab93ecf.chunk.js","sourcesContent":["import type { Contact } from '../contactsList/contactsList.presenter'\n\nexport interface FormErrors {\n  readonly name?: string\n  readonly address?: string\n  readonly ensName?: string\n  readonly isSaveDisabled: boolean\n}\n\nexport type FormMode = 'add' | 'edit'\nexport type AddressInputType = 'address' | 'ensName'\n\nexport type IsDirtyMap = { [Property in keyof Contact]: boolean }\n\ninterface State {\n  editedContact: Contact\n  isDirtyMap: IsDirtyMap\n  addressInputType: AddressInputType\n}\n\nexport const getInitialState = (selectedContact?: Contact): State => ({\n  editedContact: selectedContact ?? {\n    name: '',\n    address: '',\n    ensName: '',\n  },\n  isDirtyMap: {\n    name: false,\n    address: false,\n    ensName: false,\n  },\n  addressInputType: 'address',\n})\n\nenum Actions {\n  UPDATE_NAME,\n  UPDATE_ADDRESS,\n  UPDATE_ENS_NAME,\n  SELECT_ADDRESS_INPUT_TYPE,\n}\n\nexport const actionCreators = {\n  updateName: (\n    name: string,\n  ): { type: Actions.UPDATE_NAME; payload: { name: string } } => ({\n    type: Actions.UPDATE_NAME as const,\n    payload: { name },\n  }),\n  updateAddress: (\n    address: string,\n  ): { type: Actions.UPDATE_ADDRESS; payload: { address: string } } => ({\n    type: Actions.UPDATE_ADDRESS as const,\n    payload: { address },\n  }),\n  updateEnsName: (\n    ensName: string,\n  ): { type: Actions.UPDATE_ENS_NAME; payload: { ensName: string } } => ({\n    type: Actions.UPDATE_ENS_NAME as const,\n    payload: { ensName },\n  }),\n  selectAddressInputType: (\n    addressInputType: AddressInputType,\n    selectedContact?: Contact,\n  ): {\n    type: Actions.SELECT_ADDRESS_INPUT_TYPE\n    payload: { addressInputType: AddressInputType; selectedContact?: Contact }\n  } => ({\n    type: Actions.SELECT_ADDRESS_INPUT_TYPE as const,\n    payload: { addressInputType, selectedContact },\n  }),\n}\n\nexport type Action =\n  | ReturnType<typeof actionCreators.updateName>\n  | ReturnType<typeof actionCreators.updateAddress>\n  | ReturnType<typeof actionCreators.updateEnsName>\n  | ReturnType<typeof actionCreators.selectAddressInputType>\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case Actions.UPDATE_NAME: {\n      const { name } = action.payload\n      return {\n        ...state,\n        editedContact: {\n          ...state.editedContact,\n          name,\n        },\n        isDirtyMap: {\n          ...state.isDirtyMap,\n          name: true,\n        },\n      }\n    }\n\n    case Actions.UPDATE_ADDRESS: {\n      const { address } = action.payload\n      return {\n        ...state,\n        editedContact: {\n          ...state.editedContact,\n          address,\n        },\n        isDirtyMap: {\n          ...state.isDirtyMap,\n          address: true,\n        },\n      }\n    }\n\n    case Actions.UPDATE_ENS_NAME: {\n      const { ensName } = action.payload\n      return {\n        ...state,\n        editedContact: {\n          ...state.editedContact,\n          ensName,\n        },\n        isDirtyMap: {\n          ...state.isDirtyMap,\n          ensName: true,\n        },\n      }\n    }\n\n    case Actions.SELECT_ADDRESS_INPUT_TYPE: {\n      const { addressInputType, selectedContact } = action.payload\n\n      if (addressInputType === 'address') {\n        return {\n          ...state,\n          addressInputType,\n          editedContact: {\n            ...state.editedContact,\n            ensName: selectedContact?.ensName ?? '',\n          },\n          isDirtyMap: {\n            ...state.isDirtyMap,\n            ensName: false,\n          },\n        }\n      }\n\n      if (addressInputType === 'ensName') {\n        return {\n          ...state,\n          addressInputType,\n          editedContact: {\n            ...state.editedContact,\n            address: selectedContact?.address ?? '',\n          },\n          isDirtyMap: {\n            ...state.isDirtyMap,\n            address: false,\n          },\n        }\n      }\n\n      return state\n    }\n\n    default:\n      return state\n  }\n}\n","import * as React from 'react'\nimport classNames from 'classnames'\n\nimport './button.styles.css'\n\ntype ActionType = 'primary' | 'secondary' | 'tertiary' | 'link'\n\ninterface Props {\n  readonly children: React.ReactNode\n  readonly actionType?: ActionType\n  readonly isDisabled?: boolean\n  readonly onClick: (event: React.MouseEvent) => void\n}\n\nconst Button = ({\n  children,\n  actionType = 'primary',\n  isDisabled,\n  onClick,\n}: Props): JSX.Element => (\n  <button\n    className={classNames('btn', `btn--${actionType}`, {\n      btn__disabled: isDisabled,\n    })}\n    onClick={onClick}\n    type=\"button\"\n    disabled={isDisabled}>\n    {children}\n  </button>\n)\n\nexport default Button\n","import { useEthers } from '@usedapp/core'\n\nimport Button from 'src/components/button/button.presenter'\n\nimport './signIn.styles.css'\n\nconst SignIn = (): JSX.Element => {\n  const { activateBrowserWallet } = useEthers()\n\n  return (\n    <section className=\"sign-in\">\n      <img\n        width=\"256\"\n        alt=\"MetaMask Fox\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/MetaMask_Fox.svg/256px-MetaMask_Fox.svg.png\"\n      />\n\n      <h1>Crypto address book</h1>\n      <p className=\"sign-in--text\">\n        The easiest and quickest way to manage and pay your contacts. <br />{' '}\n        Connect yout wallet to begin.\n      </p>\n      <Button\n        actionType=\"primary\"\n        onClick={() => {\n          activateBrowserWallet()\n        }}>\n        Connect Wallet\n      </Button>\n    </section>\n  )\n}\n\nexport default SignIn\n","import './avatarPlaceholder.styles.css'\n\ninterface Props {\n  readonly name: string\n}\n\nconst getInitials = (name: string) =>\n  name\n    .split(' ')\n    .map((word: string) => word[0]?.toUpperCase())\n    .slice(0, 2)\n\nconst AvatarPlaceholder = ({ name }: Props): JSX.Element => (\n  <div className=\"avatar-placeholder\">{getInitials(name)}</div>\n)\n\nexport default AvatarPlaceholder\n","import AvatarPlaceholder from 'src/components/avatarPlaceholder/avatarPlaceholder.presenter'\nimport Button from 'src/components/button/button.presenter'\n\nimport './contactList.styles.css'\n\nexport interface Contact {\n  readonly name: string\n  readonly address: string\n  readonly ensName?: string\n}\n\ninterface Props {\n  readonly contacts: Contact[]\n  readonly onAddNewContact: () => void\n  readonly onSelectContact: (contact: Contact) => void\n}\n\nconst ContactsList = ({\n  contacts,\n  onAddNewContact,\n  onSelectContact,\n}: Props): JSX.Element => (\n  <div className=\"contact-list\">\n    <h1>Address Book</h1>\n\n    <Button actionType=\"link\" onClick={onAddNewContact}>\n      <div className=\"contact-list--new-contact\">\n        <div>+</div>\n        <div>New Contact</div>\n      </div>\n    </Button>\n\n    <div className=\"contact-list--contacts\">\n      {contacts.map((contact: Contact) => (\n        <Button\n          key={contact.name}\n          actionType=\"link\"\n          onClick={() => {\n            onSelectContact(contact)\n          }}>\n          <AvatarPlaceholder name={contact.name} />\n          <span className=\"contact-card--name\">{contact.name}</span>\n        </Button>\n      ))}\n    </div>\n  </div>\n)\n\nexport default ContactsList\n","import * as React from 'react'\n\nimport './input.styles.css'\n\ninterface Props {\n  readonly label: string\n  readonly id: string\n  readonly type: 'text' | 'number'\n  readonly value: string | number\n  readonly error?: string\n  readonly onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Input = ({\n  label,\n  id,\n  value,\n  type,\n  error,\n  onChange,\n}: Props): JSX.Element => (\n  <label htmlFor={id} className={`input ${error ? 'input__error' : ''}`}>\n    <span>{label}</span>\n    <input\n      type={type}\n      id={id}\n      value={value}\n      onChange={onChange}\n      required={!!error}\n    />\n    <span>{error}</span>\n  </label>\n)\n\nexport default Input\n","import './loader.styles.css'\n\ninterface Props {\n  readonly text?: string\n}\n\nconst Loader = ({ text }: Props): JSX.Element => (\n  <div className=\"loader--container\">\n    <div className=\"loader--spinner\" />\n    <span>{text}</span>\n  </div>\n)\n\nexport default Loader\n","import { Fragment } from 'react'\nimport type { ChangeEvent, Dispatch } from 'react'\n\nimport Button from 'src/components/button/button.presenter'\nimport Input from 'src/components/input/input.presenter'\n\nimport { actionCreators } from '../contactForm.reducer'\nimport type {\n  Action,\n  FormErrors,\n  AddressInputType,\n} from '../contactForm.reducer'\nimport type { Contact } from '../../contactsList/contactsList.presenter'\nimport './addressArea.styles.css'\n\ninterface Props {\n  readonly addressInputType: AddressInputType\n  readonly selectedContact?: Contact\n  readonly editedContact: Contact\n  readonly formErrors: FormErrors\n  readonly dispatch: Dispatch<Action>\n}\nconst AddressArea = ({\n  addressInputType,\n  selectedContact,\n  editedContact,\n  formErrors,\n  dispatch,\n}: Props): JSX.Element => (\n  <Fragment>\n    {/* Button to switch between Address and ENS Name */}\n    <div className={`address-area--address-type-switch ${addressInputType}`}>\n      <Button\n        actionType=\"link\"\n        onClick={() => {\n          dispatch(\n            actionCreators.selectAddressInputType('address', selectedContact),\n          )\n        }}>\n        Address\n      </Button>\n      <Button\n        actionType=\"link\"\n        onClick={() => {\n          dispatch(\n            actionCreators.selectAddressInputType('ensName', selectedContact),\n          )\n        }}>\n        ENS\n      </Button>\n    </div>\n\n    {addressInputType === 'address' && (\n      <Input\n        label=\"Address\"\n        id=\"address\"\n        type=\"text\"\n        value={editedContact.address}\n        error={formErrors.address}\n        onChange={(event: ChangeEvent<HTMLInputElement>) => {\n          dispatch(actionCreators.updateAddress(event.target.value))\n        }}\n      />\n    )}\n\n    {addressInputType === 'ensName' && (\n      <Input\n        label=\"ENS Name\"\n        id=\"ensName\"\n        type=\"text\"\n        value={editedContact.ensName ?? ''}\n        error={formErrors.ensName}\n        onChange={(event: ChangeEvent<HTMLInputElement>) => {\n          dispatch(actionCreators.updateEnsName(event.target.value))\n        }}\n      />\n    )}\n  </Fragment>\n)\n\nexport default AddressArea\n","import { utils, providers } from 'ethers'\n\nimport type { NotificationsContextInterface } from 'src/app'\n\nimport type { Contact } from '../contactsList/contactsList.presenter'\nimport type { FormErrors, FormMode, IsDirtyMap } from './contactForm.reducer'\n\nexport const validateForm = (\n  editedContact: Contact,\n  isDirtyMap: IsDirtyMap,\n  formMode: FormMode,\n  initialContact?: Contact,\n  allContacts?: Contact[],\n  // It's more readable to have all these rules in one place\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n): FormErrors => {\n  let formErrors: FormErrors = {\n    isSaveDisabled: false,\n  }\n\n  // If an address is invalid, return error message\n  if (isDirtyMap.address && !utils.isAddress(editedContact.address)) {\n    formErrors = {\n      ...formErrors,\n      address: 'Please enter a valid Ethereum address',\n      isSaveDisabled: true,\n    }\n  }\n\n  // If name is empty disable saving and show error message if form dirty\n  if (editedContact.name === '') {\n    formErrors = {\n      ...formErrors,\n      name:\n        isDirtyMap.name && editedContact.name === ''\n          ? 'Please enter a name'\n          : undefined,\n      isSaveDisabled: true,\n    }\n  }\n\n  // If address is empty disable saving and show error message if form dirty\n  if (isDirtyMap.address && editedContact.address === '') {\n    formErrors = {\n      ...formErrors,\n      address:\n        editedContact.address === '' ? 'Please enter an address' : undefined,\n      isSaveDisabled: true,\n    }\n  }\n\n  // If ensName is empty disable saving and show error message if form dirty\n  if (isDirtyMap.ensName && editedContact.ensName === '') {\n    formErrors = {\n      ...formErrors,\n      ensName:\n        editedContact.ensName === '' ? 'Please enter an ENS name' : undefined,\n      isSaveDisabled: true,\n    }\n  }\n\n  // Either address or ensName needs to be filled\n  if (editedContact.address === '' && editedContact.ensName === '') {\n    formErrors = {\n      ...formErrors,\n      isSaveDisabled: true,\n    }\n  }\n\n  // If a contact with the same names exists, return error messae\n  if (\n    isDirtyMap.name &&\n    editedContact.name !== initialContact?.name &&\n    allContacts?.find((contact: Contact) => contact.name === editedContact.name)\n  ) {\n    formErrors = {\n      ...formErrors,\n      name: `${editedContact.name} already exists`,\n      isSaveDisabled: true,\n    }\n  }\n\n  // If the form has not changed, disable saving\n  if (!isDirtyMap.name && !isDirtyMap.address && !isDirtyMap.ensName) {\n    formErrors = {\n      ...formErrors,\n      isSaveDisabled: true,\n    }\n  }\n\n  // If the edit form is back to initial values, disable saving\n  if (\n    formMode === 'edit' &&\n    editedContact.name === initialContact?.name &&\n    editedContact.address === initialContact?.address &&\n    editedContact.ensName === initialContact?.ensName\n  ) {\n    formErrors = {\n      ...formErrors,\n      isSaveDisabled: true,\n    }\n  }\n\n  return formErrors\n}\n\nexport const resolveEnsNameAddress = async (\n  ensName: string,\n  notificationsContext?: NotificationsContextInterface,\n): Promise<string | undefined> => {\n  try {\n    const provider = new providers.EtherscanProvider(\n      'rinkeby',\n      // In prod would have to hide the API key better\n      process.env.REACT_APP_ETHERSCAN_API_KEY,\n    )\n    return provider.resolveName(ensName)\n  } catch (error) {\n    if (notificationsContext?.setNotification) {\n      notificationsContext?.setNotification({\n        message: `Something went wrong when resolving ENS name. Please try again.`,\n        type: 'error',\n      })\n    }\n  }\n  return undefined\n}\n\nexport const notifyOnSuccessfulSave = (\n  formMode: FormMode,\n  notificationsContext?: NotificationsContextInterface,\n): void => {\n  if (notificationsContext?.setNotification) {\n    notificationsContext?.setNotification({\n      message: `Contact ${\n        formMode === 'edit' ? 'edited' : 'added'\n      } successfully`,\n      type: 'success',\n    })\n  }\n}\n\nexport const notifyOnDelete = (\n  name: string,\n  notificationsContext?: NotificationsContextInterface,\n): void => {\n  if (notificationsContext?.setNotification) {\n    notificationsContext?.setNotification({\n      message: `${name} deleted from contacts`,\n      type: 'success',\n    })\n  }\n}\n","import { useState, useEffect, useReducer, useContext } from 'react'\nimport type { FormEvent, ChangeEvent } from 'react'\n\nimport Button from 'src/components/button/button.presenter'\nimport Input from 'src/components/input/input.presenter'\nimport Loader from 'src/components/loader/loader.presenter'\nimport { NotificationsContext } from 'src/app'\n\nimport AddressArea from './addressArea/addressArea.presenter'\nimport {\n  validateForm,\n  resolveEnsNameAddress,\n  notifyOnSuccessfulSave,\n  notifyOnDelete,\n} from './contactForm.helper'\nimport { reducer, getInitialState, actionCreators } from './contactForm.reducer'\nimport type { FormErrors, FormMode } from './contactForm.reducer'\nimport type { Contact } from '../contactsList/contactsList.presenter'\nimport './contactForm.styles.css'\n\ninterface Props {\n  readonly formMode: FormMode\n  readonly contacts?: Contact[]\n  readonly selectedContact?: Contact\n  readonly onSave: (contact: Contact) => void\n  readonly onDelete?: () => void\n}\n\nconst ContactForm = ({\n  formMode,\n  contacts,\n  selectedContact,\n  onSave,\n  onDelete,\n}: Props): JSX.Element => {\n  const [state, dispatch] = useReducer(\n    reducer,\n    getInitialState(selectedContact),\n  )\n  const [isLoadingEns, setIsLoadingEns] = useState(false)\n  const [formErrors, setFormErrors] = useState<FormErrors>({\n    isSaveDisabled: false,\n  })\n  const notificationsContext = useContext(NotificationsContext)\n\n  useEffect(() => {\n    setFormErrors(\n      validateForm(\n        state.editedContact,\n        state.isDirtyMap,\n        formMode,\n        selectedContact,\n        contacts,\n      ),\n    )\n  }, [state, formMode, selectedContact, contacts])\n\n  return (\n    <div className=\"contact-form--container\">\n      <h1 className=\"contact-form--header\">\n        {formMode === 'edit' ? 'Edit' : 'New'} Contact\n      </h1>\n\n      <form\n        onSubmit={(event: FormEvent<HTMLFormElement>) => {\n          event.preventDefault()\n        }}\n        className=\"contact-form--form\">\n        <Input\n          label=\"Name\"\n          id=\"name\"\n          type=\"text\"\n          value={state.editedContact.name}\n          error={formErrors.name}\n          onChange={(event: ChangeEvent<HTMLInputElement>) => {\n            dispatch(actionCreators.updateName(event.target.value))\n          }}\n        />\n\n        <AddressArea\n          addressInputType={state.addressInputType}\n          selectedContact={selectedContact}\n          editedContact={state.editedContact}\n          formErrors={formErrors}\n          dispatch={dispatch}\n        />\n\n        <div className=\"contact-form--form--actions\">\n          {formMode === 'edit' && (\n            <Button\n              actionType=\"tertiary\"\n              onClick={() => {\n                if (onDelete && selectedContact) {\n                  onDelete()\n                  notifyOnDelete(selectedContact.name, notificationsContext)\n                }\n              }}>\n              Delete Contact\n            </Button>\n          )}\n\n          <Button\n            actionType=\"primary\"\n            isDisabled={formErrors.isSaveDisabled}\n            onClick={() => {\n              if (state.editedContact) {\n                // If using ENS Name we have to resolve it to check if it's valid\n                // In case of address, the validation is handled on type\n                if (\n                  state.addressInputType === 'ensName' &&\n                  state.editedContact.ensName\n                ) {\n                  setIsLoadingEns(true)\n                  void resolveEnsNameAddress(\n                    state.editedContact.ensName,\n                    notificationsContext,\n                  ).then((address?: string) => {\n                    if (address) {\n                      onSave({\n                        ...state.editedContact,\n                        address,\n                      })\n                      notifyOnSuccessfulSave(formMode, notificationsContext)\n                    }\n\n                    // If ENS couldn't be resolved\n                    setFormErrors({\n                      ...formErrors,\n                      ensName: 'Provided ENS name was not recognised',\n                      isSaveDisabled: true,\n                    })\n                    setIsLoadingEns(false)\n                  })\n                } else {\n                  onSave({\n                    ...state.editedContact,\n                    ensName: undefined,\n                  })\n                  notifyOnSuccessfulSave(formMode, notificationsContext)\n                }\n              }\n            }}>\n            Save\n          </Button>\n\n          <div className=\"contact-form--loader\">\n            {isLoadingEns && <Loader text=\"Checking ENS name\" />}\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default ContactForm\n","import Loader from 'src/components/loader/loader.presenter'\n\nimport { Fee } from '../transactionForm.helper'\n\ninterface Props {\n  readonly fee?: Fee\n  readonly isLoadingFee: boolean\n}\n\nconst FeeEstimate = ({ isLoadingFee, fee }: Props): JSX.Element => {\n  if (fee === undefined && !isLoadingFee) {\n    return <span>Enter amount to see the estimated tx fee</span>\n  }\n\n  if (isLoadingFee) {\n    return <Loader text=\"Estimating tx fee... \" />\n  }\n\n  return (\n    <span>\n      Estimated tx fee: {fee?.eth.slice(0, 8)} ETH,{' '}\n      {fee?.nzd && `$${fee.nzd} NZD`}\n    </span>\n  )\n}\n\nexport default FeeEstimate\n","import React, { useEffect, useContext } from 'react'\nimport type { Dispatch, SetStateAction } from 'react'\nimport { utils, providers, BigNumber } from 'ethers'\nimport { useSendTransaction } from '@usedapp/core'\nimport type { TransactionRequest } from '@ethersproject/abstract-provider'\n\nimport { NotificationsContext } from 'src/app'\nimport type { NotificationsContextInterface } from 'src/app'\n\nexport interface Fee {\n  eth: string\n  nzd?: string\n}\n\nexport interface FormErrors {\n  message?: string\n  isSendDisabled?: boolean\n}\n\nexport const validateForm = (\n  isDirty: boolean,\n  amount?: number,\n  etherBalance?: BigNumber,\n): FormErrors => {\n  let formErrors: FormErrors = {\n    isSendDisabled: false,\n  }\n\n  // If amount 0\n  if (amount === 0) {\n    formErrors = {\n      isSendDisabled: true,\n    }\n  }\n\n  // If amount empty\n  if (isDirty && !amount) {\n    formErrors = {\n      ...formErrors,\n      isSendDisabled: true,\n      message: 'Please enter amount',\n    }\n  }\n\n  // If insufficient balance\n  if (\n    isDirty &&\n    etherBalance &&\n    amount &&\n    utils.parseUnits(amount.toString(), 'ether').gt(etherBalance)\n  ) {\n    formErrors = {\n      isSendDisabled: true,\n      message: `Please come back from the moon.`,\n    }\n  }\n\n  return formErrors\n}\n\nexport const estimateTransactionFee = async (\n  amount: number,\n  address: string,\n  ethPrice?: string,\n): Promise<Fee | undefined> => {\n  const etherscanProvider = new providers.EtherscanProvider(\n    'rinkeby',\n    // In prod would have to hide the API key better\n    process.env.REACT_APP_ETHERSCAN_API_KEY,\n  )\n\n  try {\n    const [estimatedGas, gasPrice] = await Promise.all([\n      etherscanProvider.estimateGas({\n        to: address,\n        value: utils.parseEther(amount.toString()),\n      }),\n      etherscanProvider.getGasPrice(),\n    ])\n\n    const transactionFee = utils.formatEther(estimatedGas.mul(gasPrice))\n    const transactionFeeNzd =\n      ethPrice &&\n      (Number.parseFloat(transactionFee) * Number.parseFloat(ethPrice))\n        .toFixed(2)\n        .toString()\n\n    return {\n      eth: transactionFee,\n      nzd: transactionFeeNzd,\n    }\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log('error while estimating gas', error)\n  }\n\n  return undefined\n}\n\nexport const notifyOnSuccessfulTransaction = (\n  amount: number,\n  name: string,\n  notificationsContext?: NotificationsContextInterface,\n): void => {\n  if (notificationsContext?.setNotification) {\n    notificationsContext?.setNotification({\n      message: `Sent ${amount} ETH to ${name}`,\n      type: 'success',\n    })\n  }\n}\n\nexport const notifyOnFailedTransaction = (\n  message: string,\n  notificationsContext?: NotificationsContextInterface,\n): void => {\n  if (notificationsContext?.setNotification) {\n    notificationsContext?.setNotification({\n      message,\n      type: 'error',\n    })\n  }\n}\n\n/**\n * A custom hook wrapping useSendTransaction from @usedapp/core\n * with error handling.\n */\nexport const useSendTransactionWithErrorHandling = (\n  name: string,\n  setIsMining: Dispatch<SetStateAction<boolean>>,\n  setAmount: Dispatch<SetStateAction<number | undefined>>,\n  isDirty: React.MutableRefObject<boolean>,\n  amount?: number,\n): ((tr: TransactionRequest) => Promise<void>) => {\n  const { sendTransaction, state: transactionState } = useSendTransaction()\n  const notificationsContext = useContext(NotificationsContext)\n\n  useEffect(() => {\n    if (transactionState.status === 'Success' && amount) {\n      notifyOnSuccessfulTransaction(amount, name, notificationsContext)\n    }\n\n    if (\n      transactionState.status === 'Exception' &&\n      transactionState.errorMessage?.includes('User denied transaction')\n    ) {\n      notifyOnFailedTransaction(\n        `You're the boss. Transaction rejected.`,\n        notificationsContext,\n      )\n    }\n\n    if (transactionState.status === 'Fail') {\n      notifyOnFailedTransaction(\n        'Something went wrong. Please try again.',\n        notificationsContext,\n      )\n    }\n\n    if (transactionState.status !== 'Mining') {\n      setIsMining(false)\n      setAmount(0)\n      // eslint-disable-next-line no-param-reassign\n      isDirty.current = false\n    }\n    // We don't want those extra dependencies, it should run only on tx transactionState change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transactionState])\n\n  return sendTransaction\n}\n","import React, { useState, useEffect, useMemo, useRef } from 'react'\nimport { useEthers, useEtherBalance } from '@usedapp/core'\nimport { useCoingeckoPrice } from '@usedapp/coingecko'\nimport { utils } from 'ethers'\n\nimport AvatarPlaceholder from 'src/components/avatarPlaceholder/avatarPlaceholder.presenter'\nimport Input from 'src/components/input/input.presenter'\nimport Button from 'src/components/button/button.presenter'\nimport Loader from 'src/components/loader/loader.presenter'\n\nimport FeeEstimate from './feeEstimate/feeEstimate.presenter'\nimport {\n  validateForm,\n  estimateTransactionFee,\n  useSendTransactionWithErrorHandling,\n} from './transactionForm.helper'\nimport type { Fee, FormErrors } from './transactionForm.helper'\nimport type { Contact } from '../contactsList/contactsList.presenter'\nimport './transactionForm.styles.css'\n\ninterface Props {\n  readonly contact: Contact\n  readonly onEditContact: () => void\n}\n\nconst TransactionForm = ({ contact, onEditContact }: Props): JSX.Element => {\n  const [amount, setAmount] = useState<number | undefined>()\n  const [isMining, setIsMining] = useState(false)\n  const [isLoadingFee, setIsLoadingFee] = useState(false)\n  const [fee, setFee] = useState<Fee | undefined>()\n  const isDirty = useRef(false)\n\n  const sendTransaction = useSendTransactionWithErrorHandling(\n    contact.name,\n    setIsMining,\n    setAmount,\n    isDirty,\n    amount,\n  )\n  const { account } = useEthers()\n  const etherBalance = useEtherBalance(account)\n  const ethPrice: string | undefined = useCoingeckoPrice('ethereum', 'nzd')\n\n  const formErrors: FormErrors = useMemo(\n    () => validateForm(isDirty.current, amount, etherBalance),\n    [isDirty, amount, etherBalance],\n  )\n\n  useEffect(() => {\n    void (async () => {\n      if (amount) {\n        setIsLoadingFee(true)\n        const transactionFee = await estimateTransactionFee(\n          amount,\n          contact.address,\n          ethPrice,\n        )\n        setFee(transactionFee)\n        setIsLoadingFee(false)\n      }\n    })()\n  }, [amount, contact.address, ethPrice])\n\n  return (\n    <div className=\"transaction-form\">\n      <div className=\"transaction-form--contact-data\">\n        <h1>Send to {contact.name}</h1>\n        <div className=\"transaction-form--address\">{contact.address}</div>\n\n        <AvatarPlaceholder name={contact.name} />\n        <Button\n          actionType=\"link\"\n          onClick={() => {\n            onEditContact()\n          }}>\n          edit contact\n        </Button>\n      </div>\n\n      <form\n        onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n          event.preventDefault()\n        }}\n        className=\"transaction-form--form\">\n        <Input\n          label=\"Transaction amount\"\n          id=\"transactionAmount\"\n          value={amount ?? ''}\n          type=\"number\"\n          error={formErrors.message}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            const newAmount = Number.parseFloat(event.target.value)\n            setAmount(Number.isNaN(newAmount) ? undefined : newAmount)\n            isDirty.current = true\n          }}\n        />\n\n        <div className=\"transaction-form--fee\">\n          <FeeEstimate isLoadingFee={isLoadingFee} fee={fee} />\n        </div>\n\n        <div>\n          <Button\n            actionType=\"primary\"\n            isDisabled={isMining || formErrors.isSendDisabled}\n            onClick={() => {\n              if (amount) {\n                void sendTransaction({\n                  to: contact.address,\n                  value: utils.parseEther(amount.toString()),\n                })\n              }\n              setIsMining(true)\n            }}>\n            Send\n          </Button>\n        </div>\n      </form>\n\n      <div className=\"transaction-form--mining-loader\">\n        {isMining && <Loader text=\"Sending in progress...\" />}\n      </div>\n    </div>\n  )\n}\n\nexport default TransactionForm\n","import { useState } from 'react'\n\nimport ContactsList from './contactsList/contactsList.presenter'\nimport ContactForm from './contactForm/contactForm.container'\nimport TransactionForm from './transactionForm/transactionForm.container'\nimport type { Contact } from './contactsList/contactsList.presenter'\n\nimport './addressBook.styles.css'\n\nconst sortAlphabetically = (a: Contact, b: Contact) =>\n  a.name.localeCompare(b.name)\n\nconst filterOutCurrentContact = (currentContact?: Contact) => (\n  parsedContact: Contact,\n) => parsedContact.name !== currentContact?.name\n\ntype Mode = 'add' | 'edit' | 'transaction' | 'placeholder'\n\nconst AddressBook = (): JSX.Element => {\n  const [mode, setMode] = useState<Mode>('placeholder')\n  const [selectedContact, setSelectedContact] = useState<Contact | undefined>()\n\n  const storedContacts = localStorage.getItem('contacts')\n  const parsedContacts = storedContacts\n    ? (JSON.parse(storedContacts) as Contact[])\n    : []\n\n  return (\n    <div className=\"address-book\">\n      <div className=\"address-book--left\">\n        <ContactsList\n          contacts={parsedContacts}\n          onAddNewContact={() => {\n            setSelectedContact(undefined)\n            setMode('add')\n          }}\n          onSelectContact={(contact: Contact) => {\n            setSelectedContact(contact)\n            setMode('transaction')\n          }}\n        />\n      </div>\n\n      <div className=\"address-book--right\">\n        {mode === 'add' && (\n          <ContactForm\n            formMode=\"add\"\n            contacts={parsedContacts}\n            onSave={(contact: Contact) => {\n              localStorage.setItem(\n                'contacts',\n                JSON.stringify(\n                  [...parsedContacts, contact].sort(sortAlphabetically),\n                ),\n              )\n              setMode('placeholder')\n            }}\n          />\n        )}\n\n        {mode === 'edit' && (\n          <ContactForm\n            formMode=\"edit\"\n            contacts={parsedContacts}\n            selectedContact={selectedContact}\n            onSave={(contact: Contact) => {\n              localStorage.setItem(\n                'contacts',\n                JSON.stringify(\n                  [\n                    ...parsedContacts.filter(\n                      filterOutCurrentContact(selectedContact),\n                    ),\n                    contact,\n                  ].sort(sortAlphabetically),\n                ),\n              )\n              setMode('placeholder')\n            }}\n            onDelete={() => {\n              localStorage.setItem(\n                'contacts',\n                JSON.stringify(\n                  [\n                    ...parsedContacts.filter(\n                      filterOutCurrentContact(selectedContact),\n                    ),\n                  ].sort(sortAlphabetically),\n                ),\n              )\n              setMode('placeholder')\n            }}\n          />\n        )}\n\n        {mode === 'transaction' && selectedContact && (\n          <TransactionForm\n            key={selectedContact.name}\n            contact={selectedContact}\n            onEditContact={() => {\n              setMode('edit')\n            }}\n          />\n        )}\n\n        {mode === 'placeholder' && (\n          <div className=\"address-book--right--placeholder\">\n            Select a contact or add a new one to begin.\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default AddressBook\n","import './notification.styles.css'\n\ninterface Props {\n  readonly message: string\n  readonly type: 'success' | 'warning' | 'error'\n}\n\nconst Notification = ({ message, type }: Props): JSX.Element => (\n  // Using a random key as we want this component to unmount and mount fresh everytime the notification happens\n  <div key={Math.random()} className={`notification ${type}`}>\n    {message}\n  </div>\n)\n\nexport default Notification\n","import { useState, createContext } from 'react'\nimport type { Dispatch, SetStateAction } from 'react'\nimport { useEthers } from '@usedapp/core'\n\nimport SignIn from 'src/containers/signIn/signIn.container'\nimport AddressBook from 'src/containers/addressBook/addressBook.container'\nimport Notification from 'src/components/notification/notification.presenter'\n\ninterface NotificationData {\n  readonly message: string\n  readonly type: 'success' | 'warning' | 'error'\n}\n\nexport interface NotificationsContextInterface {\n  setNotification?: Dispatch<SetStateAction<NotificationData | undefined>>\n}\n\nexport const NotificationsContext = createContext<\n  NotificationsContextInterface | undefined\n>(undefined)\n\nfunction App(): JSX.Element {\n  const [notification, setNotification] = useState<\n    NotificationData | undefined\n  >()\n  const { account } = useEthers()\n\n  return (\n    <NotificationsContext.Provider value={{ setNotification }}>\n      <div className=\"main\">\n        {account ? <AddressBook /> : <SignIn />}\n        {notification && (\n          <Notification\n            message={notification?.message}\n            type={notification?.type}\n          />\n        )}\n      </div>\n    </NotificationsContext.Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry)\n        getFID(onPerfEntry)\n        getFCP(onPerfEntry)\n        getLCP(onPerfEntry)\n        getTTFB(onPerfEntry)\n      })\n      // eslint-disable-next-line no-console\n      .catch((error) => console.log('reportWebVitals', error))\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { DAppProvider } from '@usedapp/core'\n\nimport App from './app'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <DAppProvider config={{}}>\n      <App />\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}